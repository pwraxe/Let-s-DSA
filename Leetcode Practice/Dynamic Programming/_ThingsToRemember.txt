Following are some tips or things to solving DP problem

- Check for Overlapping Subproblem
- Check for dependency on a previous decision
- Data Structure for State Variable
- Create function, what it takes, what it returns
- What is a small version of the problem (its defined base case)
- Try first Recursion then add Memorization to it then Tabulation

- Draw a Recurrence Relation Tree and Create/Find out the Recurrence relation or internal flow
- Recurrence relation based on selection, dependency, exact match/notMatch to output, 

- Think about taking or not taking the concept
- if string or array is input then index is default single default state variable
- Check if you are removing something from input, taking max or min from input at each time
- Check, if the input is forming by output or output is forming by input
- Create the state variable (Data Structure/ Memoizing) based on the return type of function
   Ex. fun isWork(..): Boolean --> create BooleanArray
       fun getMin(...): Int --> Cerate IntArray etc. etc.
- IMP: Check constraints first, if size or elements are under 10^4 then recursion will work else use tabulation for the longer size of the array
- When you get it, we need three state variables, then try to calculate the third variable so that your memoizing will be 2D
