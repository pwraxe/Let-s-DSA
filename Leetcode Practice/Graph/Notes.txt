Vertex: {
	- Vertex is the Node of Graph
	- Multiple nodes are also called Vertices
	- It has an Edge connected to another vertex
}
Edge: {
	- Connected Line between two Nodes
	- In some cases, edges have weight and direction
}
Path: {
	- Sequence of Vertices to go through from one vertex to another vertex
	- Collection of multiple directly connected Vertex, from one Vertex to another Vertex 
    - Note, that there can be multiple paths from one vertex to another
}
Path Length: {
	- Total edges connected between path 
	- The Number of edges in the path
}
Cycle: {
	- The starting of Path and Ending of the Path  are on the same Vertex(Node)
	- Path where starting point and ending point on the same vertex
}
Negative Weight Cycle: {
	- The sum of all weight of Edges in the Graph Cycle is negative then it is a Negative Weight Cycle
}

Connectivity: {
	- If there exists at least one path between two vertices, these two vertices are connected
	- If Graph has at least 1 path which is connected to two Vertex
}
Degree of Vertex: {
	- Total edges connected to that vertex
	- This applied to an unweighted and undirected graph
}
In-Degree Vertex: {
	- This is applied to a directed graph
	- Total directed edges  coming towards that vertex
	- Edges coming to this destination (destination is current vertex)
}
Out-Degree: {
	- This is applied to a directed graph
	- Total directed edges going far from that vertex
	- Edges start from this source (source is current vertex)
}

There are many types of graphs, we will see 3 types 
1. Directed Graph {
	- Edges between any two nodes are with direction or arrow
	- This direction is a one-way direction
	- This also indicates the one-way relationship
	- Edges having one-way direction
}
2. Undirected Graph {
	- Edges between any two nodes are without direction or arrow
	- This also indicates the two-way relationship
	- Edges having two-way direction
}
3. Weighted Graph {
	- Edges in the graph have some values to them
	- Weight can be anything such as time, distance, size
}
Disjoint Set: {
	- When you want to check whether two vertices are connected or not quickly then use a disjoint set data structure
	- This Data Structure also known as Union-Find Data Structure
	- Primary Use of this is to identify whether two vertices are connected or not in the network (computer n/w or social n/w) 
	- It has two functions, 
		1) find(): Finds Root node of given vertex, 
		2) union(): unions two vertices and makes their root node the same
}
Terminology: {
	- Parent Node: Direct Parent Node of Vertex 
	- Root Node: Node without Parent Node, or node itself a Parent Node, it also called as Head Node
}

Implementation of disjoin set: {
	- Impl with Quick Find: In this TC of find() is O(1), and TC of union() is O(n)
	- Impl with Quick Union: TC is better than find(), 
} 

- Think of PriorityQueue when problems want to result in Lexicographical Order
=============================================================================================================
DFS is Ideal when {
	- To find all vertices
	- To find all paths from two vertices
}
DFS explores all paths from the start vertex to all other vertices 
DFS Use for
	1. Traverse all vertices
	2. Traverse all paths between any two vertices
=============================================================================================================
 BFS: Breadth-First Search

 Overview of the BFS Algorithm
 	- This is the same as DFS,
 	- This is also visits all Vertices
 	- This is very useful for finding the shortest path between any two vertices
 	- Although DFS also finds the shortest path, it needs to traverse all paths and then find the path
 	- In most cases, BFS has the natural choice to find the shortest path

 Primary Use Case of BFS
 	- To Traverse/Visit all Vertices
 	- Finding the Shortest Path (where weight >= 0)
