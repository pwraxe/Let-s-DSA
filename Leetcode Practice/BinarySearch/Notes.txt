3 Parts of a Successful Binary Search
1) Pre-processing - Sort if the collection is unsorted.
2) Binary Search - Using a loop or recursion to divide search space in half after each comparison
3) Post-processing - Determine viable candidates in the remaining space.

Binary Search Has-A 3 Template

Template 1
=================================================================================================
fun binSearch(list, target): Int {
        if(list size 0) return -1
        var start = 0
        var end = lastIndexOfList

        while(start < end) {
            val midIndex = start + (end-start) / 2
            when {
                //Update Start (take second half list)
                midIndexValue > target -> start = midIndex + 1

                //Update End (take first half list)
                midIndexValue < target -> end = midIndex - 1

                //target found return index
                midIndexValue == target -> return midIndex

                //No Item found return -1 
                else -> return -1
            }
        }
        return -1
}

Template 2
=================================================================================================
fun doBinSearch(nums: IntArray, target: Int): Int {
        if(nums.size == 0 || nums.isEmpty()) return -1
        var start = 0
        var end = nums.size-1
        
        loop@
        while (start < end) {
            val midIndex = start + (end - start) / 2
            when {
                nums[midIndex] == target -> return midIndex
                nums[midIndex] > target -> start = midIndex + 1
                else -> end = midIndex
            }
        }
        
        //Why this line is extra?
        //As you can see at loop@while(...) , condition is (start < end) it's not (start <= end)
        if (nums[start] == target) return start
        return -1
}



Template 3
=================================================================================================
class Solution {
    
    fun binSearchTemplate(nums: IntArray, target: Int) : Int {
        if(nums.size == 0 || nums.isEmpty()) return -1
        var start = 0
        var end = nums.size-1
        
        while (start+1 < end) {
            val midIndex = start + (end - start) / 2
            if(nums[midIndex] == target) return midIndex
            if(nums[midIndex] < target) start = midIndex else end = midIndex
        }

        if(nums[start] == target) return start
        if(nums[end] == target) return end
        return -1
    }
}

=================================================================================================
Binary Search on ASC and DESC Order

Not much difference except > and < Sign in when Condition
Also Note: while(start <= end)   i.e. '<=' is imp.

In Ascending Order
==================
when {
        nums[midIndex] > target -> end = midIndex - 1
        nums[midIndex] < target -> start = midIndex + 1
        nums[midIndex] == target -> return midIndex
}

In Descending Order
===================
when {
        nums[midIndex] < target -> end = midIndex - 1
        nums[midIndex] > target -> start = midIndex + 1
        nums[midIndex] == target -> return midIndex
}

